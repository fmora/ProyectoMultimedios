Control de Versiones GIT
	Local Version Control Systems
		Metodología artesana, se guardan distintas versiones del archivo en forma local.
	Centralized version control systems
		Mantener archivos en un solo servidor. Permite colaboradores.
	Distributed version control systems
		Hay un servidor, y cada usuario localmente mantiene los archivos. Evita problemas de centralización. (Espejo)
	GIT
		Es Distributed version control systems. Nacio como necesidad por los desarroladores de kernel de linux.
		Metas: Velocidad, diseño simple, soporte para desarrollo no lineal.
		Actualiza los archivos, no los reescribe (mantiene un log de los cambios de archivos, permite volver a versiones anteriores).
		Estados:
			Commited: generar cambios de archivos.
			Modified: modificar lineas de códigos.
			Staged: preparar el archivo para después hacer un commit.
		Estados Principales:
			Working Directory -> staging area -> git directory (repository)
			-> commit
			<- check 
		Primeros Pasos:
			Identidad:
				git config --global user.name "John Doe"
				git config --global user.email johndoe@example.com
			Diff Tool
				git config --global merge.tool vimdiff
			git config --list
			Inicializar git en el directorio
				git init
			Se creara el directorio .git donde guarda el log
				git add *							//staged
				git add README
				git commit -m "mi primer commit :)" //commited
			Clonar directorio existente
				git clone git://github.com/schacon/grit.git
				git colne git://github.com/schacon/grit.git mygrit //cambia nombre de la carpeta
			Estado de mis archivos:
				git status
			Ignorar archivos
				Archivo .gitignore -> contiene todos los archivos que deseas ignorar.
			Revisar diferencias de archivos
				git diff -> ver diferencia entre archivos
			
		Ciclo de vida de los archivos
			untracked -> unmodified -> modified -> staged
			
			
		git pull //obtener la ultima version
		git add *
		git rm elarchivo.extension
		git commit -m "blabla"
		git push repo master
		